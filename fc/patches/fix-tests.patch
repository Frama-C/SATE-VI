diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_01.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_01.c
index fc7c27d..53d6b2c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a value input from the console */
     fscanf (stdin, "%c", &data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_02.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_02.c
index 99f2852..6310cc1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c
index 15c51d6..2371413 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_04.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_04.c
index d939855..826cf40 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_05.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_05.c
index d53cddf..f04b722 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_06.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_06.c
index 4eb9456..a4605fc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_07.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_07.c
index 1815fec..7bae677 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_08.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_08.c
index 839b820..4e73215 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_09.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_09.c
index e9c334f..1e8bece 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_10.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_10.c
index f12a41d..b211cf4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_11.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_11.c
index e4240f0..a61b807 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_12.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_12.c
index d29f159..ee7b37b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c
index 0d30f6c..3589509 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_14.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_14.c
index 3164637..b510844 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c
index bdea8e8..2476b27 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c
index 0b625df..b896317 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_17.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_17.c
index 8add8c3..bc4d7e4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c
index 7f5f708..dbada7a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c
index f8e7468..2c23634 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(char data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_22b.c
index a8cb37c..6a6d762 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Sink(char data)
     if(CWE190_Integer_Overflow__char_fscanf_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_31.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_31.c
index f5a5967..b789adf 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         char dataCopy = data;
         char data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_32.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_32.c
index 882bf75..d5df6df 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         char data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_34.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_34.c
index 3d79dab..c6c0047 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         char data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_41.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_41.c
index ebf9b57..1a7a9fe 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_42.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_42.c
index 31a2ca4..4117a96 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = ' ';
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_44.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_44.c
index 3214a27..a417d7e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c
index b2b4eef..99a6e83 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_fscanf_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_51b.c
index 4ac849b..049ed48 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_51b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_fscanf_square_51b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_52c.c
index e546839..72bb72b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_52c_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_fscanf_square_52c_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_53d.c
index 4f86f98..ad86123 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_53d_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_fscanf_square_53d_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_54e.c
index 3d8f907..f680af4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_54e_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_fscanf_square_54e_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_61a.c
index d59c454..fcc5691 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = ' ';
     data = CWE190_Integer_Overflow__char_fscanf_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_63b.c
index 1a19fb6..5b8b6b6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_63b_goodB2GSink(char * dataPtr)
 {
     char data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_64b.c
index 32b608b..ecfe360 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_64b_goodB2GSink(void * dataVoid
     /* dereference dataPtr into data */
     char data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_65b.c
index 15676ea..83b7193 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_65b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_fscanf_square_65b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_66b.c
index 271e32e..1905796 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_66b_goodB2GSink(char dataArray[
 {
     char data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_67b.c
index 3761d6c..4ec05df 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_67b_goodB2GSink(CWE190_Integer_
 {
     char data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_68b.c
index ac0a081..a8da797 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__char_fscanf_square_68b_goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_fscanf_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_01.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_01.c
index 464eca9..f80522c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use the maximum size of the data type */
     data = CHAR_MAX;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_02.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_02.c
index 39bed22..fd2a87d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_03.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_03.c
index a77e9ea..7d14058 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_04.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_04.c
index ed0c740..6ef3c53 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c
index 4faa006..cd2ac54 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_06.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_06.c
index aec7535..bbd91fe 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_07.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_07.c
index 59ae627..1ef3e05 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_08.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_08.c
index 15c1d09..fc4ef8d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_09.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_09.c
index 445ec85..93d572a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_10.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_10.c
index 655b14c..8d3f15b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_11.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_11.c
index 051a855..4a43e72 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_12.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_12.c
index 1f4a748..5fe201c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__char_max_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_13.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_13.c
index 462d3e6..1a77ad6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_14.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_14.c
index 7400028..e1e34b2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_15.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_15.c
index 499d9b4..8daa864 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_16.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_16.c
index 8c1db00..15e0631 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_17.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_17.c
index d90ec4f..1313585 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c
index 2b8f2a6..8f3630d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_21.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_21.c
index 3cd73bf..a7aeb71 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(char data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_22b.c
index 1f8d7ba..5fe719d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_max_square_22_goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__char_max_square_22_goodB2G2Sink(char data)
     if(CWE190_Integer_Overflow__char_max_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_31.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_31.c
index 819d1bd..f90fa88 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         char dataCopy = data;
         char data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_32.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_32.c
index adb4975..e8efba2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         char data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_34.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_34.c
index 323bcd3..d06dc81 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         char data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_41.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_41.c
index bb1cda6..ab8be87 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_42.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_42.c
index 66389a3..ddeacb0 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = ' ';
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_44.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_44.c
index 532c56f..7233330 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c
index 1aa0fb9..fa4fe05 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_max_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_51b.c
index 00a5281..750a349 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_max_square_51b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_max_square_51b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_52c.c
index 5dd62d5..544d9b4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_max_square_52c_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_max_square_52c_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_53d.c
index 77d07ab..62f4205 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_max_square_53d_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_max_square_53d_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_54e.c
index d641975..14274cc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_max_square_54e_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_max_square_54e_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61a.c
index 7042c46..569713c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = ' ';
     data = CWE190_Integer_Overflow__char_max_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_63b.c
index 527256c..2c7b0c9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__char_max_square_63b_goodB2GSink(char * dataPtr)
 {
     char data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64b.c
index 2622ee3..ea9703d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__char_max_square_64b_goodB2GSink(void * dataVoidPtr
     /* dereference dataPtr into data */
     char data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_65b.c
index e8e1b53..570a5f7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_max_square_65b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_max_square_65b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_66b.c
index 4b18b3c..89ab4c9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__char_max_square_66b_goodB2GSink(char dataArray[])
 {
     char data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_67b.c
index 3c40857..3f6ddec 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_max_square_67b_goodB2GSink(CWE190_Integer_Ove
 {
     char data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_68b.c
index 24d9d21..f9f227f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_max_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__char_max_square_68b_goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_max_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_01.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_01.c
index 2e776f1..dde8bb5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a random value */
     data = (char)RAND32();
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_02.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_02.c
index 6fa4a0d..6b48ac9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_03.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_03.c
index 7f74a70..d813203 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_04.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_04.c
index c5056a4..8aa1379 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_05.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_05.c
index eb851d4..e5810f7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_06.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_06.c
index 7b54451..bcec45c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_07.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_07.c
index 3bc79de..86a37db 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_08.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_08.c
index 74f6a20..6d616e6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_09.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_09.c
index 9d6b6d8..b2ab7f8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_10.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_10.c
index 9d95acf..b6cc6f4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_11.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_11.c
index 35b0c9d..729af07 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_12.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_12.c
index 7a23437..4d67384 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__char_rand_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_13.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_13.c
index 533fff5..d993035 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_14.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_14.c
index 64bd8d8..724ee7c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_15.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_15.c
index c571982..306e355 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_16.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_16.c
index bfd2de6..033bb10 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_17.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_17.c
index 766ed3e..a5474fc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_18.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_18.c
index b21addc..5aa65b5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c
index 0e2792a..248ad36 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(char data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_22b.c
index 1ec1615..3371d7e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_rand_square_22_goodB2G1Sink(char data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Sink(char data)
     if(CWE190_Integer_Overflow__char_rand_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c
index 2b22d4a..43d5072 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         char dataCopy = data;
         char data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_32.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_32.c
index 5c553fc..7579237 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         char data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c
index 15975df..27ebe62 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         char data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
         {
             char result = data * data;
             printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c
index e47eb08..f23f684 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_42.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_42.c
index 3308bd3..57e8781 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = ' ';
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_44.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_44.c
index 97b5d15..fdc78d3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_45.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_45.c
index f88f029..8ac868e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_rand_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_51b.c
index c8b3103..f245ed9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_rand_square_51b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_rand_square_51b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_52c.c
index 66065f3..e0c9c07 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_rand_square_52c_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_rand_square_52c_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_53d.c
index ed5b37b..dd77db0 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_rand_square_53d_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_rand_square_53d_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_54e.c
index c9b72e3..59061ab 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_rand_square_54e_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_rand_square_54e_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_61a.c
index 2f2d644..2669bad 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = ' ';
     data = CWE190_Integer_Overflow__char_rand_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_63b.c
index 4905c12..ff62adf 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__char_rand_square_63b_goodB2GSink(char * dataPtr)
 {
     char data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_64b.c
index 22dd67a..35af8dd 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__char_rand_square_64b_goodB2GSink(void * dataVoidPt
     /* dereference dataPtr into data */
     char data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_65b.c
index a321702..233e317 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__char_rand_square_65b_goodG2BSink(char data)
 void CWE190_Integer_Overflow__char_rand_square_65b_goodB2GSink(char data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_66b.c
index daa7b8f..1ba9c4d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__char_rand_square_66b_goodB2GSink(char dataArray[])
 {
     char data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_67b.c
index 9e012f5..d9d3ec1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__char_rand_square_67b_goodB2GSink(CWE190_Integer_Ov
 {
     char data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_68b.c
index 9de8951..dfa3c89 100644
--- a/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__char_rand_square_68b_goodB2GSink()
 {
     char data = CWE190_Integer_Overflow__char_rand_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)CHAR_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)CHAR_MAX))
     {
         char result = data * data;
         printHexCharLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_01.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_01.c
index 5ddd9ae..9bf260b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a value input from the console */
     fscanf (stdin, "%hd", &data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_02.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_02.c
index 52a1437..6fba21a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_03.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_03.c
index 8d281e6..f10d0be 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_04.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_04.c
index 9d3d962..da4759f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_05.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_05.c
index b9fdbeb..abda4d9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_06.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_06.c
index 2f0a564..4b22460 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_07.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_07.c
index 95bcef1..654fbb7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_08.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_08.c
index cda693a..2e999d5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_09.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_09.c
index 524d77e..8b3ba3f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_10.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_10.c
index 273cb6e..1230e93 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_11.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_11.c
index b147db5..357539a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c
index 0ecde11..53e34a7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_13.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_13.c
index 2028a17..c98cd87 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_14.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_14.c
index 2c8cdfb..84c09cb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c
index 32dd209..2a33be4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_16.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_16.c
index 7dbe65f..a22a59c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_17.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_17.c
index 6305a3c..122a4c4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_18.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_18.c
index e8ff998..0b533a3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_21.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_21.c
index 4247170..341ee7a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(short data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_22b.c
index 13943ac..f35f9a4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_22_goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_22_goodB2G2Sink(short data)
     if(CWE190_Integer_Overflow__short_fscanf_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_31.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_31.c
index 833a129..088b63b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         short dataCopy = data;
         short data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_32.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_32.c
index ff83ecc..8f6734e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         short data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_34.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_34.c
index 970237a..b45a766 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         short data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_41.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_41.c
index 7ec1cd4..ab4fa99 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c
index 908846f..c184446 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_44.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_44.c
index ea59f7e..3597290 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_45.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_45.c
index 8412293..21e2477 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_fscanf_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_51b.c
index 714b458..167a773 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_51b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_fscanf_square_51b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_52c.c
index cd7d59b..f4bcbaf 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_52c_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_fscanf_square_52c_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c
index 1e20975..2da4113 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_53d_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_fscanf_square_53d_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_54e.c
index 51e0c2f..2af1141 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_54e_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_fscanf_square_54e_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_61a.c
index c6621ad..8856a76 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__short_fscanf_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_63b.c
index 6e1ecaf..4f2aec5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_63b_goodB2GSink(short * dataPt
 {
     short data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_64b.c
index e501a95..bc73926 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_64b_goodB2GSink(void * dataVoi
     /* dereference dataPtr into data */
     short data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_65b.c
index 0bd69f9..762b5bc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_65b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_fscanf_square_65b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_66b.c
index 0548601..eb2303e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_66b_goodB2GSink(short dataArra
 {
     short data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_67b.c
index 8acf427..0e87eaa 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_67b_goodB2GSink(CWE190_Integer
 {
     short data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_68b.c
index 17a98c4..3d17633 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__short_fscanf_square_68b_goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_fscanf_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c
index 9844620..2e6248c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use the maximum size of the data type */
     data = SHRT_MAX;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c
index 53c988f..79ca34e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_03.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_03.c
index aaeef7a..148fda5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_04.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_04.c
index ccf941b..3e91bb8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_05.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_05.c
index 05fe16e..c42f7b4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c
index fa72063..e0a2668 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_07.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_07.c
index ddc533a..6e13365 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_08.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_08.c
index 626744a..b5e2b01 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_09.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_09.c
index 477a096..119b3dc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_10.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_10.c
index d03b47e..94b2ca9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_11.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_11.c
index b40d6d7..962181a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c
index b3fceb0..73629fc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__short_max_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_13.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_13.c
index 42b409f..660d44f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_14.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_14.c
index f433c2b..0626420 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_15.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_15.c
index 80627d8..84ae12a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_16.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_16.c
index 3ac0928..1dc8286 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_17.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_17.c
index 5ebbd92..a16210e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_18.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_18.c
index 082ee83..64cb987 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_21.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_21.c
index 66119b9..244cf69 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(short data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_22b.c
index c010604..875d029 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_max_square_22_goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__short_max_square_22_goodB2G2Sink(short data)
     if(CWE190_Integer_Overflow__short_max_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_31.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_31.c
index ca68290..0bfd997 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         short dataCopy = data;
         short data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c
index deec5ac..8a40515 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         short data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_34.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_34.c
index 3706bec..6dd11bd 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         short data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c
index fa1a772..2b97c34 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_42.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_42.c
index 8e1e3bf..5326b24 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_44.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_44.c
index 03a417d..2a2f436 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_45.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_45.c
index 9ec8c8e..58df247 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_max_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_51b.c
index dd73c66..5a68ecb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_max_square_51b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_max_square_51b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_52c.c
index 915637b..6e55de5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_max_square_52c_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_max_square_52c_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_53d.c
index ceb6483..1afc8b1f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_max_square_53d_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_max_square_53d_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_54e.c
index 3b03c16..39ff075 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_max_square_54e_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_max_square_54e_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_61a.c
index 7286de9..7603c55 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__short_max_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_63b.c
index 3d99d17..c7fc443 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__short_max_square_63b_goodB2GSink(short * dataPtr)
 {
     short data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c
index dfb3dee..68a79b1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__short_max_square_64b_goodB2GSink(void * dataVoidPt
     /* dereference dataPtr into data */
     short data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_65b.c
index 6891c67..32c70d7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_max_square_65b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_max_square_65b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_66b.c
index 2b700fd..35ef761 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__short_max_square_66b_goodB2GSink(short dataArray[]
 {
     short data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_67b.c
index 5be608a..9c5d3ce 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_max_square_67b_goodB2GSink(CWE190_Integer_Ov
 {
     short data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_68b.c
index 0ead536..f073272 100644
--- a/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__short_max_square_68b_goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_max_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_01.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_01.c
index 6978abf..c7cac29 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a random value */
     data = (short)RAND32();
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_02.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_02.c
index 391a95e..0b9ad37 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c
index ecbcc31..f01d611 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_04.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_04.c
index 92b09fb..c6e8984 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_05.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_05.c
index a649902..0da5102 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_06.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_06.c
index 62915c8..85a93b2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_07.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_07.c
index 040cb92..1b8d42e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_08.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_08.c
index d24982b..8f15fc4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_09.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_09.c
index 98a0b9a..01b123f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_10.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_10.c
index 123b410..efbe13b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_11.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_11.c
index 89363f7..79b0caa 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_12.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_12.c
index 68184ee..08de56d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__short_rand_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_13.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_13.c
index 9545285..225a806 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c
index 62dbb34..e6e150e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_15.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_15.c
index 966e19e..80363b3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_16.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_16.c
index 7a402d4..ac95389 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c
index bb46833..8a91bd4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_18.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_18.c
index 0b26172..1320e8b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_21.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_21.c
index 0e23f60..8460742 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(short data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_22b.c
index eb6b3ab..4f4ca8d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_rand_square_22_goodB2G1Sink(short data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__short_rand_square_22_goodB2G2Sink(short data)
     if(CWE190_Integer_Overflow__short_rand_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_31.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_31.c
index 9c13e66..19350a4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         short dataCopy = data;
         short data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_32.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_32.c
index 3062a9a..824faf9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         short data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_34.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_34.c
index 76bc876..9810fce 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         short data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+        if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
         {
             short result = data * data;
             printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_41.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_41.c
index 2fd25a5..d5081be 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_42.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_42.c
index 55ea7dd..8bcd1b2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_44.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_44.c
index 95d8487..6a0aeb9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_45.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_45.c
index eeee9a1..03b923a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_rand_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_51b.c
index 5dd442e..0c058bf 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_rand_square_51b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_rand_square_51b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_52c.c
index db91447..e0eccd7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_rand_square_52c_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_rand_square_52c_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_53d.c
index 40b4341..8bd7163 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_rand_square_53d_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_rand_square_53d_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_54e.c
index ca0b864..3564789 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_rand_square_54e_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_rand_square_54e_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_61a.c
index 1a247da..6aa434a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__short_rand_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_63b.c
index 18fa9f1..d78a1d9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__short_rand_square_63b_goodB2GSink(short * dataPtr)
 {
     short data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_64b.c
index a9787a2..92f6e3f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__short_rand_square_64b_goodB2GSink(void * dataVoidP
     /* dereference dataPtr into data */
     short data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_65b.c
index 755a77e..df0f14a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__short_rand_square_65b_goodG2BSink(short data)
 void CWE190_Integer_Overflow__short_rand_square_65b_goodB2GSink(short data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_66b.c
index c57ab86..0e7dffa 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__short_rand_square_66b_goodB2GSink(short dataArray[
 {
     short data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c
index 200ba8b..b2c4e9b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__short_rand_square_67b_goodB2GSink(CWE190_Integer_O
 {
     short data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_68b.c
index b098546..2f5c9cd 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__short_rand_square_68b_goodB2GSink()
 {
     short data = CWE190_Integer_Overflow__short_rand_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) <= (long)sqrt((double)SHRT_MAX))
+    if (data <= LONG_MAX && labs(data) <= (long)sqrt((double)SHRT_MAX))
     {
         short result = data * data;
         printIntLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_01.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_01.c
index 5e2721f..a999df9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a value input from the console */
     fscanf (stdin, "%u", &data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_02.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_02.c
index e015932..38390f1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_03.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_03.c
index 9486dbd..d101b39 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_04.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_04.c
index 4571736..fd6e692 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_05.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_05.c
index 397b43d..8d79bb1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c
index 7cb411f..5ad3c97 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_07.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_07.c
index dd98605..5e8445f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_08.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_08.c
index b273930..cec5ac8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_09.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_09.c
index e8481c9..f1c4da7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c
index f1c1a32..7f7356c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_11.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_11.c
index f828017..ff03c64 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_12.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_12.c
index 55214ec..8d15c33 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_13.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_13.c
index 25aa0ec..c69eb68 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_14.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_14.c
index 69b1a52..3e359a1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_15.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_15.c
index 6f0e081..d2d3396 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c
index 0a1a147..ef79991 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c
index 8a18126..e0cab36 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_18.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_18.c
index dc9cc6f..9af3f8c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c
index f9dfd30..adbc39b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(unsigned int data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(unsigned int data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_22b.c
index d5ab193..c9c6265 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_22_goodB2G1Sink(unsigne
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_22_goodB2G2Sink(unsigne
     if(CWE190_Integer_Overflow__unsigned_int_fscanf_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_31.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_31.c
index a36a598..80731f3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         unsigned int dataCopy = data;
         unsigned int data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_32.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_32.c
index 1ff9569..4af18b8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         unsigned int data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_34.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_34.c
index 05be86b..91368b4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         unsigned int data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c
index 2386ee9..771dfab 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_42.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_42.c
index 6e8da77..3679686 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_44.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_44.c
index 79fb243..2202f17 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_45.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_45.c
index 9a42125..7b54c52 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_fscanf_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b.c
index 78cc55b2..1c51576 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b_goodG2BSink(unsigne
 void CWE190_Integer_Overflow__unsigned_int_fscanf_square_51b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c.c
index ff89e04..1e30751 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c_goodG2BSink(unsigne
 void CWE190_Integer_Overflow__unsigned_int_fscanf_square_52c_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d.c
index d2c51d5..5e62eb6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d_goodG2BSink(unsigne
 void CWE190_Integer_Overflow__unsigned_int_fscanf_square_53d_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e.c
index 4f6a05d..fa42492 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e_goodG2BSink(unsigne
 void CWE190_Integer_Overflow__unsigned_int_fscanf_square_54e_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_61a.c
index fea400c..38569af 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__unsigned_int_fscanf_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_63b.c
index a63e5aa..9572ca4 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_63b_goodB2GSink(unsigne
 {
     unsigned int data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_64b.c
index 683e647..06d8a97 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_64b_goodB2GSink(void *
     /* dereference dataPtr into data */
     unsigned int data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b.c
index d9b4a2f..71da06e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b_goodG2BSink(unsigne
 void CWE190_Integer_Overflow__unsigned_int_fscanf_square_65b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_66b.c
index c4aa80f..168f9c1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_66b_goodB2GSink(unsigne
 {
     unsigned int data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_67b.c
index bc5749c..98b85a0 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_67b_goodB2GSink(CWE190_
 {
     unsigned int data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_68b.c
index fa996dc..2a8b543 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__unsigned_int_fscanf_square_68b_goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_fscanf_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c
index adb6dbd..275d611 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use the maximum size of the data type */
     data = UINT_MAX;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_02.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_02.c
index 86e7b29..58d71b6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_03.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_03.c
index bfb5f3d..889d85f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c
index 94d1d42..f5f7991 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_05.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_05.c
index d4e730f..9e1d9c8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_06.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_06.c
index 46cfd72..8250e38 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_07.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_07.c
index 6a7b7a0..25f5d8c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c
index e597d37..76403b7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_09.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_09.c
index 276846e..cc378a9 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c
index 98f37f9..b28d4f3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_11.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_11.c
index bf5f6ec..18c0fbe 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_12.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_12.c
index 1a2a2dc..01f87c0 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_13.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_13.c
index c91bfa3..ef7d84d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_14.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_14.c
index 6de004b..585cb02 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c
index 5524ab4..44ce4e3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c
index 3962e12..d0a77dc 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_17.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_17.c
index 21cee0c..c0a24ff 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c
index 1033494..15afff3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_21.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_21.c
index 03879c9..0a6e425 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(unsigned int data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(unsigned int data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_22b.c
index eeeadbe..98a4f9c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_22_goodB2G1Sink(unsigned i
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_22_goodB2G2Sink(unsigned i
     if(CWE190_Integer_Overflow__unsigned_int_max_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_31.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_31.c
index 15dedbd..059abcb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         unsigned int dataCopy = data;
         unsigned int data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c
index 967e7cb..b099665 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         unsigned int data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_34.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_34.c
index adb2622..9722c1b 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         unsigned int data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c
index fce884b..c8e6a7c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_42.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_42.c
index d983149..cb7cf5a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c
index 318033c..73edd5d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_45.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_45.c
index f4f85de..66f3b51 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_max_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_51b.c
index c5df690..09e1936 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_51b_goodG2BSink(unsigned i
 void CWE190_Integer_Overflow__unsigned_int_max_square_51b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_52c.c
index 3277c96..e90b4fb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_52c_goodG2BSink(unsigned i
 void CWE190_Integer_Overflow__unsigned_int_max_square_52c_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_53d.c
index 51e66e6..76ad014 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_53d_goodG2BSink(unsigned i
 void CWE190_Integer_Overflow__unsigned_int_max_square_53d_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_54e.c
index c0e5939..a93935e 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_54e_goodG2BSink(unsigned i
 void CWE190_Integer_Overflow__unsigned_int_max_square_54e_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_61a.c
index a35b4e4..56be135 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__unsigned_int_max_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_63b.c
index 90f9971..c1613c2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_63b_goodB2GSink(unsigned i
 {
     unsigned int data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_64b.c
index 25b3233..6b08fd0 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_64b_goodB2GSink(void * dat
     /* dereference dataPtr into data */
     unsigned int data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c
index 58e2f69..76a7a21 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_65b_goodG2BSink(unsigned i
 void CWE190_Integer_Overflow__unsigned_int_max_square_65b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_66b.c
index 30af772..97dd373 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_66b_goodB2GSink(unsigned i
 {
     unsigned int data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_67b.c
index b528601..c7c252f 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_67b_goodB2GSink(CWE190_Int
 {
     unsigned int data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c
index fd89df8..2804bc7 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__unsigned_int_max_square_68b_goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_max_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c
index 98d4dc0..eeb47c2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_01.c
@@ -60,7 +60,7 @@ static void goodB2G()
     /* POTENTIAL FLAW: Use a random value */
     data = (unsigned int)RAND32();
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_02.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_02.c
index 02d7faa..4c8d3bd 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_02.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_02.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c
index 9affaf0..6658a75 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_03.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(5==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_04.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_04.c
index d953875..b7b9979 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_04.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_04.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(STATIC_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_05.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_05.c
index 0da80ac..fa08a00 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_05.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_05.c
@@ -68,7 +68,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -93,7 +93,7 @@ static void goodB2G2()
     if(staticTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_06.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_06.c
index d82ea25..7a37c06 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_06.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_06.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(STATIC_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_07.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_07.c
index 8d3aab8..49b3bd3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_07.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_07.c
@@ -67,7 +67,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -92,7 +92,7 @@ static void goodB2G2()
     if(staticFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_08.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_08.c
index 37e074e..c218172 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_08.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_08.c
@@ -75,7 +75,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -100,7 +100,7 @@ static void goodB2G2()
     if(staticReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_09.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_09.c
index a6adf00..bffe808 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_09.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_09.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_TRUE)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_10.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_10.c
index bf15431..9bded46 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_10.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_10.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalTrue)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_11.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_11.c
index 2df3578..bffaa57 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_11.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_11.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalReturnsTrue())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c
index 486434f..d28a760 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_12.c
@@ -46,7 +46,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_12_bad()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -82,7 +82,7 @@ static void goodB2G()
     if(globalReturnsTrueOrFalse())
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -95,7 +95,7 @@ static void goodB2G()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_13.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_13.c
index 462e9a2..69e02fd 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_13.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_13.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(GLOBAL_CONST_FIVE==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_14.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_14.c
index f1a9c66..531baef 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_14.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_14.c
@@ -62,7 +62,7 @@ static void goodB2G1()
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -87,7 +87,7 @@ static void goodB2G2()
     if(globalFive==5)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_15.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_15.c
index 868ebf4..980768a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_15.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_15.c
@@ -80,7 +80,7 @@ static void goodB2G1()
         break;
     default:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -113,7 +113,7 @@ static void goodB2G2()
     {
     case 7:
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_16.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_16.c
index 9d70e69..7fcc0c6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_16.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_16.c
@@ -60,7 +60,7 @@ static void goodB2G()
     while(1)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_17.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_17.c
index af8d24a..578ffc6 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_17.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_17.c
@@ -59,7 +59,7 @@ static void goodB2G()
     for(k = 0; k < 1; k++)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c
index ab0a224..98ac5bb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_18.c
@@ -54,7 +54,7 @@ source:
     goto sink;
 sink:
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_21.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_21.c
index e401116..30e1bf3 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_21.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_21.c
@@ -66,7 +66,7 @@ static void goodB2G1Sink(unsigned int data)
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -94,7 +94,7 @@ static void goodB2G2Sink(unsigned int data)
     if(goodB2G2Static)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c
index dcf090c..5e7a7b8 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_22b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G1Sink(unsigned
     else
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
@@ -74,7 +74,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G2Sink(unsigned
     if(CWE190_Integer_Overflow__unsigned_int_rand_square_22_goodB2G2Global)
     {
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c
index 6ad955a..2c96485 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_31.c
@@ -71,7 +71,7 @@ static void goodB2G()
         unsigned int dataCopy = data;
         unsigned int data = dataCopy;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_32.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_32.c
index 2c05bb4..49f99c5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_32.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_32.c
@@ -86,7 +86,7 @@ static void goodB2G()
     {
         unsigned int data = *dataPtr2;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c
index f6e4d29..223cb10 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_34.c
@@ -80,7 +80,7 @@ static void goodB2G()
     {
         unsigned int data = myUnion.unionSecond;
         /* FIX: Add a check to prevent an overflow from occurring */
-        if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+        if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
         {
             unsigned int result = data * data;
             printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c
index 29e28b9..a9bcaec 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_41.c
@@ -66,7 +66,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c
index e456198..8e89e26 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_42.c
@@ -78,7 +78,7 @@ static void goodB2G()
     data = 0;
     data = goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_44.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_44.c
index 95c4066..5a686db 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_44.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_44.c
@@ -70,7 +70,7 @@ static void goodG2B()
 static void goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_45.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_45.c
index f10a7a7..098789a 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_45.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_45.c
@@ -75,7 +75,7 @@ static void goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_rand_square_45_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_51b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_51b.c
index c6710c8..ec16909 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_51b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_51b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_51b_goodG2BSink(unsigned
 void CWE190_Integer_Overflow__unsigned_int_rand_square_51b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_52c.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_52c.c
index baf9cc6..207aabb 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_52c.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_52c.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_52c_goodG2BSink(unsigned
 void CWE190_Integer_Overflow__unsigned_int_rand_square_52c_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_53d.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_53d.c
index 11191da..74b14ff 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_53d.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_53d.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_53d_goodG2BSink(unsigned
 void CWE190_Integer_Overflow__unsigned_int_rand_square_53d_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_54e.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_54e.c
index 8c05d74..4eac7a2 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_54e.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_54e.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_54e_goodG2BSink(unsigned
 void CWE190_Integer_Overflow__unsigned_int_rand_square_54e_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_61a.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_61a.c
index 6b68f6c..173a740 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_61a.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_61a.c
@@ -64,7 +64,7 @@ static void goodB2G()
     data = 0;
     data = CWE190_Integer_Overflow__unsigned_int_rand_square_61b_goodB2GSource(data);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_63b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_63b.c
index 3bbc4de..9098176 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_63b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_63b.c
@@ -51,7 +51,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_63b_goodB2GSink(unsigned
 {
     unsigned int data = *dataPtr;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_64b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_64b.c
index 0a8c538..2f2690c 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_64b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_64b.c
@@ -60,7 +60,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_64b_goodB2GSink(void * da
     /* dereference dataPtr into data */
     unsigned int data = (*dataPtr);
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_65b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_65b.c
index 3c29907..a42ba48 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_65b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_65b.c
@@ -48,7 +48,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_65b_goodG2BSink(unsigned
 void CWE190_Integer_Overflow__unsigned_int_rand_square_65b_goodB2GSink(unsigned int data)
 {
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c
index 0cb5ba2..47c65c5 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c
@@ -52,7 +52,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_66b_goodB2GSink(unsigned
 {
     unsigned int data = dataArray[2];
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_67b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_67b.c
index d5ed929..19ec4f1 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_67b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_67b.c
@@ -56,7 +56,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_67b_goodB2GSink(CWE190_In
 {
     unsigned int data = myStruct.structFirst;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_68b.c b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_68b.c
index 8e6bd2d..81caf7d 100644
--- a/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_68b.c
+++ b/C/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_68b.c
@@ -55,7 +55,7 @@ void CWE190_Integer_Overflow__unsigned_int_rand_square_68b_goodB2GSink()
 {
     unsigned int data = CWE190_Integer_Overflow__unsigned_int_rand_square_68_goodB2GData;
     /* FIX: Add a check to prevent an overflow from occurring */
-    if (abs((long)data) < (long)sqrt((double)UINT_MAX))
+    if (data <= LONG_MAX && labs(data) < (long)sqrt((double)UINT_MAX))
     {
         unsigned int result = data * data;
         printUnsignedLine(result);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_01.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_01.c
index 78ff3a9..b068169 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_01.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_01.c
@@ -21,11 +21,11 @@ Template File: sources-sink-01.tmpl.c
 void CWE843_Type_Confusion__char_01_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
@@ -40,11 +40,11 @@ void CWE843_Type_Confusion__char_01_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_02.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_02.c
index 0b7fa9d..f4af4eb 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_02.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_02.c
@@ -21,13 +21,13 @@ Template File: sources-sink-02.tmpl.c
 void CWE843_Type_Confusion__char_02_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(1)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_02_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(0)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(1)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_03.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_03.c
index 2953369..7132a52 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_03.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_03.c
@@ -21,13 +21,13 @@ Template File: sources-sink-03.tmpl.c
 void CWE843_Type_Confusion__char_03_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(5==5)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_03_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(5!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(5==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_04.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_04.c
index a208a70..de4b30b 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_04.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_04.c
@@ -28,13 +28,13 @@ static const int STATIC_CONST_FALSE = 0; /* false */
 void CWE843_Type_Confusion__char_04_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_TRUE)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -50,6 +50,7 @@ void CWE843_Type_Confusion__char_04_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FALSE)
@@ -61,7 +62,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -73,13 +73,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_TRUE)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_05.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_05.c
index dbd7f0f..437407b 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_05.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_05.c
@@ -28,13 +28,13 @@ static int staticFalse = 0; /* false */
 void CWE843_Type_Confusion__char_05_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(staticTrue)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -50,6 +50,7 @@ void CWE843_Type_Confusion__char_05_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFalse)
@@ -61,7 +62,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -73,13 +73,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticTrue)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c
index 4a335c8..a8df8ef 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_06.c
@@ -25,13 +25,13 @@ static const int STATIC_CONST_FIVE = 5;
 void CWE843_Type_Confusion__char_06_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE==5)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -47,6 +47,7 @@ void CWE843_Type_Confusion__char_06_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE!=5)
@@ -58,7 +59,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -70,13 +70,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_07.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_07.c
index a61497a..6d0647f 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_07.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_07.c
@@ -27,13 +27,13 @@ static int staticFive = 5;
 void CWE843_Type_Confusion__char_07_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(staticFive==5)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__char_07_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFive!=5)
@@ -60,7 +61,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -72,13 +72,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFive==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c
index adb13a8..318a61a 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_08.c
@@ -35,13 +35,13 @@ static int staticReturnsFalse()
 void CWE843_Type_Confusion__char_08_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(staticReturnsTrue())
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -57,6 +57,7 @@ void CWE843_Type_Confusion__char_08_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticReturnsFalse())
@@ -68,7 +69,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -80,13 +80,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticReturnsTrue())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_09.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_09.c
index d1f77fd..2925794 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_09.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_09.c
@@ -21,13 +21,13 @@ Template File: sources-sink-09.tmpl.c
 void CWE843_Type_Confusion__char_09_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_TRUE)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_09_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FALSE)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_TRUE)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_10.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_10.c
index 3d9ce33..189171e 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_10.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_10.c
@@ -21,13 +21,13 @@ Template File: sources-sink-10.tmpl.c
 void CWE843_Type_Confusion__char_10_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(globalTrue)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_10_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFalse)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalTrue)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c
index d65ef98..00925c9 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_11.c
@@ -21,13 +21,13 @@ Template File: sources-sink-11.tmpl.c
 void CWE843_Type_Confusion__char_11_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrue())
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_11_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsFalse())
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrue())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c
index 5f9f5ee..96f7057 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_12.c
@@ -21,13 +21,14 @@ Template File: sources-sink-12.tmpl.c
 void CWE843_Type_Confusion__char_12_bad()
 {
     void * data;
+    char charBuffer = 'a';
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrueOrFalse())
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -35,7 +36,6 @@ void CWE843_Type_Confusion__char_12_bad()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -52,13 +52,13 @@ void CWE843_Type_Confusion__char_12_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrueOrFalse())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,7 +66,6 @@ static void goodG2B()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_13.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_13.c
index c1013ed..3d0a93f 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_13.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_13.c
@@ -21,13 +21,13 @@ Template File: sources-sink-13.tmpl.c
 void CWE843_Type_Confusion__char_13_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE==5)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_13_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_14.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_14.c
index 98197f2..345450a 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_14.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_14.c
@@ -21,13 +21,13 @@ Template File: sources-sink-14.tmpl.c
 void CWE843_Type_Confusion__char_14_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     if(globalFive==5)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__char_14_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFive!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFive==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_15.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_15.c
index 29ec5c0..c099e3d 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_15.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_15.c
@@ -21,6 +21,7 @@ Template File: sources-sink-15.tmpl.c
 void CWE843_Type_Confusion__char_15_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     switch(6)
@@ -28,7 +29,6 @@ void CWE843_Type_Confusion__char_15_bad()
     case 6:
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     break;
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__char_15_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     switch(5)
@@ -60,7 +61,6 @@ static void goodG2B1()
     default:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     break;
@@ -73,6 +73,7 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     switch(6)
@@ -80,7 +81,6 @@ static void goodG2B2()
     case 6:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     break;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_16.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_16.c
index 8ea6759..ba73ea6 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_16.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_16.c
@@ -21,13 +21,13 @@ Template File: sources-sink-16.tmpl.c
 void CWE843_Type_Confusion__char_16_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     while(1)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
         break;
@@ -44,13 +44,13 @@ void CWE843_Type_Confusion__char_16_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     while(1)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
         break;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_17.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_17.c
index f848fee..38fab9d 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_17.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_17.c
@@ -22,13 +22,13 @@ void CWE843_Type_Confusion__char_17_bad()
 {
     int i;
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     for(i = 0; i < 1; i++)
     {
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
     }
@@ -45,13 +45,13 @@ static void goodG2B()
 {
     int h;
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     for(h = 0; h < 1; h++)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_18.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_18.c
index 2e5d4f4..f66912b 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_18.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_18.c
@@ -21,13 +21,13 @@ Template File: sources-sink-18.tmpl.c
 void CWE843_Type_Confusion__char_18_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     goto source;
 source:
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
@@ -42,13 +42,13 @@ source:
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     goto source;
 source:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_31.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_31.c
index fd3c48f..61fa62d 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_31.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_31.c
@@ -21,11 +21,11 @@ Template File: sources-sink-31.tmpl.c
 void CWE843_Type_Confusion__char_31_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     {
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__char_31_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     {
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_32.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_32.c
index fe56bd4..31380e3 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_32.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_32.c
@@ -21,6 +21,7 @@ Template File: sources-sink-32.tmpl.c
 void CWE843_Type_Confusion__char_32_bad()
 {
     void * data;
+    char charBuffer = 'a';
     void * *dataPtr1 = &data;
     void * *dataPtr2 = &data;
     /* Initialize data */
@@ -29,7 +30,6 @@ void CWE843_Type_Confusion__char_32_bad()
         void * data = *dataPtr1;
         {
             /* FLAW: Point data to a char */
-            char charBuffer = 'a';
             data = &charBuffer;
         }
         *dataPtr1 = data;
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__char_32_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     void * *dataPtr1 = &data;
     void * *dataPtr2 = &data;
     /* Initialize data */
@@ -57,7 +58,6 @@ static void goodG2B()
         void * data = *dataPtr1;
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
         *dataPtr1 = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_34.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_34.c
index dd0744a..0cfc747 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_34.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_34.c
@@ -27,12 +27,12 @@ typedef union
 void CWE843_Type_Confusion__char_34_bad()
 {
     void * data;
+    char charBuffer = 'a';
     CWE843_Type_Confusion__char_34_unionType myUnion;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     myUnion.unionFirst = data;
@@ -51,12 +51,12 @@ void CWE843_Type_Confusion__char_34_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     CWE843_Type_Confusion__char_34_unionType myUnion;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     myUnion.unionFirst = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_41.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_41.c
index d48f03f..f2dd0d6 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_41.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_41.c
@@ -27,11 +27,11 @@ void CWE843_Type_Confusion__char_41_badSink(void * data)
 void CWE843_Type_Confusion__char_41_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_41_badSink(data);
@@ -51,11 +51,11 @@ void CWE843_Type_Confusion__char_41_goodG2BSink(void * data)
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_41_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_44.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_44.c
index d138c28..4788e55 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_44.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_44.c
@@ -27,13 +27,13 @@ static void badSink(void * data)
 void CWE843_Type_Confusion__char_44_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* define a function pointer */
     void (*funcPtr) (void *) = badSink;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     /* use the function pointer */
@@ -54,12 +54,12 @@ static void goodG2BSink(void * data)
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     void (*funcPtr) (void *) = goodG2BSink;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     funcPtr(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_45.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_45.c
index 4cc1119..95ff4e1 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_45.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_45.c
@@ -31,11 +31,11 @@ static void badSink()
 void CWE843_Type_Confusion__char_45_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_45_badData = data;
@@ -57,11 +57,11 @@ static void goodG2BSink()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_45_goodG2BData = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_01.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_01.c
index 4644473..adf9008 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_01.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_01.c
@@ -40,11 +40,11 @@ void CWE843_Type_Confusion__short_01_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_02.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_02.c
index 2d6eeba..8102a7c 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_02.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_02.c
@@ -21,13 +21,13 @@ Template File: sources-sink-02.tmpl.c
 void CWE843_Type_Confusion__short_02_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(1)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_02_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(0)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(1)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_03.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_03.c
index cec04c0..5886e16 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_03.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_03.c
@@ -21,13 +21,13 @@ Template File: sources-sink-03.tmpl.c
 void CWE843_Type_Confusion__short_03_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(5==5)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_03_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(5!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(5==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_04.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_04.c
index 0280c3d..950df06 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_04.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_04.c
@@ -28,13 +28,13 @@ static const int STATIC_CONST_FALSE = 0; /* false */
 void CWE843_Type_Confusion__short_04_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_TRUE)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -50,6 +50,7 @@ void CWE843_Type_Confusion__short_04_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FALSE)
@@ -61,7 +62,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -73,13 +73,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_TRUE)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_05.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_05.c
index 566e8a3..18e0a36 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_05.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_05.c
@@ -28,13 +28,13 @@ static int staticFalse = 0; /* false */
 void CWE843_Type_Confusion__short_05_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticTrue)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -50,6 +50,7 @@ void CWE843_Type_Confusion__short_05_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFalse)
@@ -61,7 +62,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -73,13 +73,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticTrue)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_06.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_06.c
index 447d8ba..648eab8 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_06.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_06.c
@@ -25,13 +25,13 @@ static const int STATIC_CONST_FIVE = 5;
 void CWE843_Type_Confusion__short_06_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE==5)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -47,6 +47,7 @@ void CWE843_Type_Confusion__short_06_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE!=5)
@@ -58,7 +59,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -70,13 +70,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(STATIC_CONST_FIVE==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_07.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_07.c
index 9822315..892bcc6 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_07.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_07.c
@@ -27,13 +27,13 @@ static int staticFive = 5;
 void CWE843_Type_Confusion__short_07_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFive==5)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__short_07_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFive!=5)
@@ -60,7 +61,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -72,13 +72,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticFive==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_08.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_08.c
index a4aafb1..93faae0 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_08.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_08.c
@@ -35,13 +35,13 @@ static int staticReturnsFalse()
 void CWE843_Type_Confusion__short_08_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticReturnsTrue())
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -57,6 +57,7 @@ void CWE843_Type_Confusion__short_08_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticReturnsFalse())
@@ -68,7 +69,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -80,13 +80,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(staticReturnsTrue())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_09.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_09.c
index 33649ac..af756f8 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_09.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_09.c
@@ -21,13 +21,13 @@ Template File: sources-sink-09.tmpl.c
 void CWE843_Type_Confusion__short_09_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_TRUE)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_09_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FALSE)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_TRUE)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_10.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_10.c
index 5857c03..89519e2 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_10.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_10.c
@@ -21,13 +21,13 @@ Template File: sources-sink-10.tmpl.c
 void CWE843_Type_Confusion__short_10_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalTrue)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_10_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFalse)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalTrue)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_11.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_11.c
index f8b4a60..803ddab 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_11.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_11.c
@@ -21,13 +21,13 @@ Template File: sources-sink-11.tmpl.c
 void CWE843_Type_Confusion__short_11_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrue())
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_11_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsFalse())
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrue())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_12.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_12.c
index d2b3869..7e9977a 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_12.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_12.c
@@ -21,13 +21,13 @@ Template File: sources-sink-12.tmpl.c
 void CWE843_Type_Confusion__short_12_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrueOrFalse())
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -52,13 +52,13 @@ void CWE843_Type_Confusion__short_12_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalReturnsTrueOrFalse())
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,7 +66,6 @@ static void goodG2B()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_13.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_13.c
index 9dd0b21..1857c52 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_13.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_13.c
@@ -21,13 +21,13 @@ Template File: sources-sink-13.tmpl.c
 void CWE843_Type_Confusion__short_13_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE==5)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_13_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(GLOBAL_CONST_FIVE==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_14.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_14.c
index fe841b5..a53fef1 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_14.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_14.c
@@ -21,13 +21,13 @@ Template File: sources-sink-14.tmpl.c
 void CWE843_Type_Confusion__short_14_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFive==5)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -43,6 +43,7 @@ void CWE843_Type_Confusion__short_14_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFive!=5)
@@ -54,7 +55,6 @@ static void goodG2B1()
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
@@ -66,13 +66,13 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     if(globalFive==5)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_15.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_15.c
index 9a2fad0..13d78ee 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_15.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_15.c
@@ -21,6 +21,7 @@ Template File: sources-sink-15.tmpl.c
 void CWE843_Type_Confusion__short_15_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     switch(6)
@@ -28,7 +29,6 @@ void CWE843_Type_Confusion__short_15_bad()
     case 6:
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     break;
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__short_15_bad()
 static void goodG2B1()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     switch(5)
@@ -60,7 +61,6 @@ static void goodG2B1()
     default:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     break;
@@ -73,6 +73,7 @@ static void goodG2B1()
 static void goodG2B2()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     switch(6)
@@ -80,7 +81,6 @@ static void goodG2B2()
     case 6:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     break;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_16.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_16.c
index 4b3e960..e830c83 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_16.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_16.c
@@ -21,13 +21,13 @@ Template File: sources-sink-16.tmpl.c
 void CWE843_Type_Confusion__short_16_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     while(1)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
         break;
@@ -44,13 +44,13 @@ void CWE843_Type_Confusion__short_16_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     while(1)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
         break;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_17.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_17.c
index a1ba979..39ad4ee 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_17.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_17.c
@@ -22,13 +22,13 @@ void CWE843_Type_Confusion__short_17_bad()
 {
     int i;
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     for(i = 0; i < 1; i++)
     {
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
     }
@@ -45,13 +45,13 @@ static void goodG2B()
 {
     int h;
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     for(h = 0; h < 1; h++)
     {
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
     }
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_18.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_18.c
index 47574cc..da5a3f5 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_18.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_18.c
@@ -21,13 +21,13 @@ Template File: sources-sink-18.tmpl.c
 void CWE843_Type_Confusion__short_18_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     goto source;
 source:
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
@@ -42,13 +42,13 @@ source:
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     goto source;
 source:
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     /* POTENTIAL FLAW: Attempt to access data as an int */
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_31.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_31.c
index a78fb9d..1d44395 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_31.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_31.c
@@ -21,11 +21,11 @@ Template File: sources-sink-31.tmpl.c
 void CWE843_Type_Confusion__short_31_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     {
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__short_31_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     {
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_32.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_32.c
index 3c08e43..6924715 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_32.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_32.c
@@ -21,6 +21,7 @@ Template File: sources-sink-32.tmpl.c
 void CWE843_Type_Confusion__short_32_bad()
 {
     void * data;
+    short shortBuffer = 8;
     void * *dataPtr1 = &data;
     void * *dataPtr2 = &data;
     /* Initialize data */
@@ -29,7 +30,6 @@ void CWE843_Type_Confusion__short_32_bad()
         void * data = *dataPtr1;
         {
             /* FLAW: Point data to a short */
-            short shortBuffer = 8;
             data = &shortBuffer;
         }
         *dataPtr1 = data;
@@ -49,6 +49,7 @@ void CWE843_Type_Confusion__short_32_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     void * *dataPtr1 = &data;
     void * *dataPtr2 = &data;
     /* Initialize data */
@@ -57,7 +58,6 @@ static void goodG2B()
         void * data = *dataPtr1;
         {
             /* FIX: Point data to an int */
-            int intBuffer = 8;
             data = &intBuffer;
         }
         *dataPtr1 = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_34.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_34.c
index db9fad1..ed49dba 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_34.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_34.c
@@ -27,12 +27,12 @@ typedef union
 void CWE843_Type_Confusion__short_34_bad()
 {
     void * data;
+    short shortBuffer = 8;
     CWE843_Type_Confusion__short_34_unionType myUnion;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     myUnion.unionFirst = data;
@@ -51,12 +51,12 @@ void CWE843_Type_Confusion__short_34_bad()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     CWE843_Type_Confusion__short_34_unionType myUnion;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     myUnion.unionFirst = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_41.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_41.c
index 1a70272..b129c24 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_41.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_41.c
@@ -27,11 +27,11 @@ void CWE843_Type_Confusion__short_41_badSink(void * data)
 void CWE843_Type_Confusion__short_41_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_41_badSink(data);
@@ -51,11 +51,11 @@ void CWE843_Type_Confusion__short_41_goodG2BSink(void * data)
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_41_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_44.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_44.c
index 202aa2b..359b605 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_44.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_44.c
@@ -27,13 +27,13 @@ static void badSink(void * data)
 void CWE843_Type_Confusion__short_44_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* define a function pointer */
     void (*funcPtr) (void *) = badSink;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     /* use the function pointer */
@@ -54,12 +54,12 @@ static void goodG2BSink(void * data)
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     void (*funcPtr) (void *) = goodG2BSink;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     funcPtr(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_45.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_45.c
index a199455..0452553 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_45.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_45.c
@@ -31,11 +31,11 @@ static void badSink()
 void CWE843_Type_Confusion__short_45_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_45_badData = data;
@@ -57,11 +57,11 @@ static void goodG2BSink()
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_45_goodG2BData = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_51a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_51a.c
index 678ecf240..911155443 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_51a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_51a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_51b_badSink(void * data);
 void CWE843_Type_Confusion__char_51_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_51b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__char_51b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_51b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_52a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_52a.c
index 45b04cf5e..94318b98e 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_52a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_52a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_52b_badSink(void * data);
 void CWE843_Type_Confusion__char_52_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_52b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__char_52b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_52b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_53a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_53a.c
index 9879a54d0..a4e226b86 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_53a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_53a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_53b_badSink(void * data);
 void CWE843_Type_Confusion__char_53_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_53b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__char_53b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_53b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_54a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_54a.c
index 6163063b4..69160ef1f 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_54a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_54a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_54b_badSink(void * data);
 void CWE843_Type_Confusion__char_54_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_54b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__char_54b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_54b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_63a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_63a.c
index 3dc76f78a..7a2258fca 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_63a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_63a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_63b_badSink(void * * dataPtr);
 void CWE843_Type_Confusion__char_63_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_63b_badSink(&data);
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__char_63b_goodG2BSink(void * * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_63b_goodG2BSink(&data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_64a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_64a.c
index 87ac81568..20d399870 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_64a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_64a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__char_64b_badSink(void * dataVoidPtr);
 void CWE843_Type_Confusion__char_64_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_64b_badSink(&data);
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__char_64b_goodG2BSink(void * dataVoidPtr);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_64b_goodG2BSink(&data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_65a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_65a.c
index 1a437a135..dfb4b59de 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_65a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_65a.c
@@ -26,11 +26,11 @@ void CWE843_Type_Confusion__char_65_bad()
     void * data;
     /* define a function pointer */
     void (*funcPtr) (void *) = CWE843_Type_Confusion__char_65b_badSink;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     /* use the function pointer */
@@ -48,11 +48,11 @@ static void goodG2B()
 {
     void * data;
     void (*funcPtr) (void *) = CWE843_Type_Confusion__char_65b_goodG2BSink;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     funcPtr(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_66a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_66a.c
index d012d6412..a5ddfbfba 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_66a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_66a.c
@@ -25,11 +25,11 @@ void CWE843_Type_Confusion__char_66_bad()
 {
     void * data;
     void * dataArray[5];
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     /* put data in array */
@@ -48,11 +48,11 @@ static void goodG2B()
 {
     void * data;
     void * dataArray[5];
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     dataArray[2] = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_67a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_67a.c
index 05e404030..8fd525ca2 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_67a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_67a.c
@@ -30,11 +30,11 @@ void CWE843_Type_Confusion__char_67_bad()
 {
     void * data;
     CWE843_Type_Confusion__char_67_structType myStruct;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     myStruct.structFirst = data;
@@ -52,11 +52,11 @@ static void goodG2B()
 {
     void * data;
     CWE843_Type_Confusion__char_67_structType myStruct;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     myStruct.structFirst = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_68a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_68a.c
index 4be08d405..33aba590e 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_68a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__char_68a.c
@@ -27,11 +27,11 @@ void CWE843_Type_Confusion__char_68b_badSink();
 void CWE843_Type_Confusion__char_68_bad()
 {
     void * data;
+    char charBuffer = 'a';
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a char */
-        char charBuffer = 'a';
         data = &charBuffer;
     }
     CWE843_Type_Confusion__char_68_badData = data;
@@ -49,11 +49,11 @@ void CWE843_Type_Confusion__char_68b_goodG2BSink();
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__char_68_goodG2BData = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_51a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_51a.c
index 9eed4d0f7..72f65c102 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_51a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_51a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_51b_badSink(void * data);
 void CWE843_Type_Confusion__short_51_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_51b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__short_51b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_51b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_52a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_52a.c
index 3fb62dcd7..bfc722b41 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_52a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_52a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_52b_badSink(void * data);
 void CWE843_Type_Confusion__short_52_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_52b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__short_52b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_52b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_53a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_53a.c
index 5170bc520..8eba4afa0 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_53a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_53a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_53b_badSink(void * data);
 void CWE843_Type_Confusion__short_53_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_53b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__short_53b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_53b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_54a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_54a.c
index 5051e35a4..306136c6c 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_54a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_54a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_54b_badSink(void * data);
 void CWE843_Type_Confusion__short_54_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_54b_badSink(data);
@@ -45,11 +45,11 @@ void CWE843_Type_Confusion__short_54b_goodG2BSink(void * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_54b_goodG2BSink(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_63a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_63a.c
index 4e7c6ec41..9ac4482e2 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_63a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_63a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_63b_badSink(void * * dataPtr);
 void CWE843_Type_Confusion__short_63_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_63b_badSink(&data);
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__short_63b_goodG2BSink(void * * data);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_63b_goodG2BSink(&data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_64a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_64a.c
index 0f8040a8f..f349aabb6 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_64a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_64a.c
@@ -24,11 +24,11 @@ void CWE843_Type_Confusion__short_64b_badSink(void * dataVoidPtr);
 void CWE843_Type_Confusion__short_64_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_64b_badSink(&data);
@@ -44,11 +44,11 @@ void CWE843_Type_Confusion__short_64b_goodG2BSink(void * dataVoidPtr);
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_64b_goodG2BSink(&data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_65a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_65a.c
index 10e9aac73..31469366f 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_65a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_65a.c
@@ -26,11 +26,11 @@ void CWE843_Type_Confusion__short_65_bad()
     void * data;
     /* define a function pointer */
     void (*funcPtr) (void *) = CWE843_Type_Confusion__short_65b_badSink;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     /* use the function pointer */
@@ -48,11 +48,11 @@ static void goodG2B()
 {
     void * data;
     void (*funcPtr) (void *) = CWE843_Type_Confusion__short_65b_goodG2BSink;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     funcPtr(data);
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_66a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_66a.c
index a88408062..def1165e0 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_66a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_66a.c
@@ -25,11 +25,11 @@ void CWE843_Type_Confusion__short_66_bad()
 {
     void * data;
     void * dataArray[5];
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     /* put data in array */
@@ -48,11 +48,11 @@ static void goodG2B()
 {
     void * data;
     void * dataArray[5];
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     dataArray[2] = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_67a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_67a.c
index a5bcf2b01..8ae29a438 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_67a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_67a.c
@@ -30,11 +30,11 @@ void CWE843_Type_Confusion__short_67_bad()
 {
     void * data;
     CWE843_Type_Confusion__short_67_structType myStruct;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     myStruct.structFirst = data;
@@ -52,11 +52,11 @@ static void goodG2B()
 {
     void * data;
     CWE843_Type_Confusion__short_67_structType myStruct;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     myStruct.structFirst = data;
diff --git a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_68a.c b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_68a.c
index 140b2b48f..98be017d6 100644
--- a/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_68a.c
+++ b/C/testcases/CWE843_Type_Confusion/CWE843_Type_Confusion__short_68a.c
@@ -27,11 +27,11 @@ void CWE843_Type_Confusion__short_68b_badSink();
 void CWE843_Type_Confusion__short_68_bad()
 {
     void * data;
+    short shortBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FLAW: Point data to a short */
-        short shortBuffer = 8;
         data = &shortBuffer;
     }
     CWE843_Type_Confusion__short_68_badData = data;
@@ -49,11 +49,11 @@ void CWE843_Type_Confusion__short_68b_goodG2BSink();
 static void goodG2B()
 {
     void * data;
+    int intBuffer = 8;
     /* Initialize data */
     data = NULL;
     {
         /* FIX: Point data to an int */
-        int intBuffer = 8;
         data = &intBuffer;
     }
     CWE843_Type_Confusion__short_68_goodG2BData = data;
